{"title":"Git","slug":"Git","date":"2021-05-04T11:36:43.000Z","updated":"2021-05-04T13:31:31.401Z","comments":true,"path":"api/articles/Git.json","excerpt":null,"covers":["../img/image-20210504194416373.png","../img/image-20210504195034124.png","../img/image-20210504195134256.png","../img/image-20210504194533298.png","../img/image-20210504194639960.png","../img/image-20210504194734013.png","../img/image-20210504195343743.png","../img/image-20210504195721339.png","../img/image-20210504195925690.png","../img/image-20210504200102817.png","../img/image-20210504200233058.png","../img/image-20210504200453908.png","../img/image-20210504200554204.png","../img/image-20210504200659338.png","../img/image-20210504200711531.png","../img/image-20210504201126684.png","../img/image-20210504201156084.png","../img/image-20210504201626619.png","../img/image-20210504203045490.png","../img/image-20210504203219100.png","../img/image-20210504203420609.png","../img/image-20210504203937184.png","../img/image-20210504204121963.png","../img/image-20210504204315996.png","../img/image-20210504204410140.png","../img/image-20210504204428438.png","../img/image-20210504205845484.png","../img/image-20210504205826026.png","../img/image-20210504210133979.png","../img/image-20210504210808774.png","../img/image-20210504210826946.png","../img/image-20210504210841542.png","../img/image-20210504211311018.png","../img/image-20210504211322608.png","../img/image-20210504211532031.png","../img/image-20210504211622522.png"],"content":"<h2 id=\"版本控制\"><a href=\"#版本控制\" class=\"headerlink\" title=\"版本控制\"></a>版本控制</h2><h3 id=\"介绍\"><a href=\"#介绍\" class=\"headerlink\" title=\"介绍\"></a>介绍</h3><p>版本控制（Revision control）是一种在开发的过程中用于管理我们对文件、目录或工程等内容的修改历史，方便查看更改历史记录，备份以便恢复以前的版本的软件工程技术。</p>\n<ul>\n<li>实现跨区域多人协同开发</li>\n<li>追踪和记载一个或者多个文件的历史记录</li>\n<li>组织和保护你的源代码和文档</li>\n<li>统计工作量</li>\n<li>并行开发、提高开发效率</li>\n<li>跟踪记录整个软件的开发过程</li>\n<li>减轻开发人员的负担，节省时间，同时降低人为错误</li>\n</ul>\n<p>简单说就是用于管理多人协同开发项目的技术。</p>\n<h3 id=\"常见工具\"><a href=\"#常见工具\" class=\"headerlink\" title=\"常见工具\"></a>常见工具</h3><p>我们学习的东西，一定是当下最流行的！</p>\n<p>主流的版本控制器有如下这些：</p>\n<ul>\n<li><strong>Git</strong></li>\n<li><strong>SVN</strong>（Subversion）</li>\n<li><strong>CVS</strong>（Concurrent Versions System）</li>\n<li><strong>VSS</strong>（Micorosoft Visual SourceSafe）</li>\n<li><strong>TFS</strong>（Team Foundation Server）</li>\n<li>Visual Studio Online</li>\n</ul>\n<p>版本控制产品非常的多（Perforce、Rational ClearCase、RCS（GNU Revision Control System）、Serena Dimention、SVK、BitKeeper、Monotone、Bazaar、Mercurial、SourceGear Vault），现在影响力最大且使用最广泛的是Git与SVN</p>\n<h2 id=\"开始使用Git\"><a href=\"#开始使用Git\" class=\"headerlink\" title=\"开始使用Git\"></a>开始使用Git</h2><h3 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h3><p>打开 [git官网] <a href=\"https://git-scm.com/%EF%BC%8C%E4%B8%8B%E8%BD%BDgit%E5%AF%B9%E5%BA%94%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E7%9A%84%E7%89%88%E6%9C%AC%E3%80%82\">https://git-scm.com/，下载git对应操作系统的版本。</a></p>\n<p>所有东西下载慢的话就可以去找镜像！</p>\n<p>官网下载太慢，我们可以使用淘宝镜像下载：<a href=\"http://npm.taobao.org/mirrors/git-for-windows/\">http://npm.taobao.org/mirrors/git-for-windows/</a></p>\n<h3 id=\"启动\"><a href=\"#启动\" class=\"headerlink\" title=\"启动\"></a>启动</h3><p>安装成功后在开始菜单中会有Git项，菜单下有3个程序：任意文件夹下右键也可以看到对应的程序！</p>\n<p><img src= \"/img/loading.gif\" data-lazy-src=\"../img/image-20210504194416373.png\" alt=\"image-20210504194416373\"></p>\n<p><strong>Git Bash：</strong>Unix与Linux风格的命令行，使用最多，推荐最多</p>\n<p><strong>Git CMD：</strong>Windows风格的命令行</p>\n<p><strong>Git GUI</strong>：图形界面的Git，不建议初学者使用，尽量先熟悉常用命令</p>\n<h3 id=\"Git配置\"><a href=\"#Git配置\" class=\"headerlink\" title=\"Git配置\"></a>Git配置</h3><p><strong>所有配置文件都保存在本地</strong></p>\n<p><img src= \"/img/loading.gif\" data-lazy-src=\"../img/image-20210504195034124.png\" alt=\"image-20210504195034124\"></p>\n<p><img src= \"/img/loading.gif\" data-lazy-src=\"../img/image-20210504195134256.png\" alt=\"image-20210504195134256\"></p>\n<ul>\n<li>查看配置 </li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git config -l</span><br></pre></td></tr></table></figure>\n\n<p><img src= \"/img/loading.gif\" data-lazy-src=\"../img/image-20210504194533298.png\" alt=\"image-20210504194533298\"></p>\n<ul>\n<li>本地配置</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git config --system --list</span><br></pre></td></tr></table></figure>\n\n<p><img src= \"/img/loading.gif\" data-lazy-src=\"../img/image-20210504194639960.png\" alt=\"image-20210504194639960\"></p>\n<ul>\n<li>全局配置</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git config --global --list</span><br></pre></td></tr></table></figure>\n\n<p><img src= \"/img/loading.gif\" data-lazy-src=\"../img/image-20210504194734013.png\" alt=\"image-20210504194734013\"></p>\n<ul>\n<li><p>设置用户名和邮箱</p>\n<p>将会修改用户目录下的<code>.gitconfig</code>文件</p>\n</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git config --global user.name <span class=\"string\">&quot;HUII&quot;</span></span><br><span class=\"line\">git config --global user.email <span class=\"string\">&quot;1390113493@qq.com&quot;</span></span><br></pre></td></tr></table></figure>\n\n<p><img src= \"/img/loading.gif\" data-lazy-src=\"../img/image-20210504195343743.png\" alt=\"image-20210504195343743\"></p>\n<h2 id=\"Git理论\"><a href=\"#Git理论\" class=\"headerlink\" title=\"Git理论\"></a>Git理论</h2><h3 id=\"基本结构\"><a href=\"#基本结构\" class=\"headerlink\" title=\"基本结构\"></a>基本结构</h3><p>Git本地有三个工作区域：工作目录（Working Directory）、暂存区(Stage/Index)、资源库(Repository或Git Directory)。如果在加上远程的git仓库(Remote Directory)就可以分为四个工作区域。文件在这四个区域之间的转换关系如下：</p>\n<p><img src= \"/img/loading.gif\" data-lazy-src=\"../img/image-20210504195721339.png\" alt=\"image-20210504195721339\"></p>\n<ul>\n<li>Workspace：工作区，就是你平时存放项目代码的地方</li>\n<li>Index / Stage：暂存区，用于临时存放你的改动，<strong>事实上它只是一个文件</strong>，保存即将提交到文件列表信息</li>\n<li>Repository：仓库区（或本地仓库），就是安全存放数据的位置，这里面有你提交到所有版本的数据。其中HEAD指向最新放入仓库的版本</li>\n<li>Remote：远程仓库，托管代码的服务器，可以简单的认为是你项目组中的一台电脑用于远程数据交换</li>\n</ul>\n<p><img src= \"/img/loading.gif\" data-lazy-src=\"../img/image-20210504195925690.png\" alt=\"image-20210504195925690\"></p>\n<h3 id=\"工作流程\"><a href=\"#工作流程\" class=\"headerlink\" title=\"工作流程\"></a>工作流程</h3><ul>\n<li><p>在工作目录中添加、修改文件；</p>\n</li>\n<li><p>将需要进行版本管理的文件放入暂存区域；</p>\n</li>\n<li><p>将暂存区域的文件提交到git仓库。</p>\n</li>\n</ul>\n<p>因此，git管理的文件有三种状态：已修改（modified）,已暂存（staged）,已提交(committed)</p>\n<p><img src= \"/img/loading.gif\" data-lazy-src=\"../img/image-20210504200102817.png\" alt=\"image-20210504200102817\"></p>\n<h2 id=\"Git基本操作\"><a href=\"#Git基本操作\" class=\"headerlink\" title=\"Git基本操作\"></a>Git基本操作</h2><h3 id=\"创建工作目录与常用指令\"><a href=\"#创建工作目录与常用指令\" class=\"headerlink\" title=\"创建工作目录与常用指令\"></a>创建工作目录与常用指令</h3><p><img src= \"/img/loading.gif\" data-lazy-src=\"../img/image-20210504200233058.png\" alt=\"image-20210504200233058\"></p>\n<h4 id=\"本地仓库搭建\"><a href=\"#本地仓库搭建\" class=\"headerlink\" title=\"本地仓库搭建\"></a>本地仓库搭建</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git init</span><br></pre></td></tr></table></figure>\n\n<p><img src= \"/img/loading.gif\" data-lazy-src=\"../img/image-20210504200453908.png\" alt=\"image-20210504200453908\"></p>\n<h4 id=\"克隆远程仓库到本地\"><a href=\"#克隆远程仓库到本地\" class=\"headerlink\" title=\"克隆远程仓库到本地\"></a>克隆远程仓库到本地</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git <span class=\"built_in\">clone</span> [url]</span><br></pre></td></tr></table></figure>\n\n\n\n<p><img src= \"/img/loading.gif\" data-lazy-src=\"../img/image-20210504200554204.png\" alt=\"image-20210504200554204\"></p>\n<p><img src= \"/img/loading.gif\" data-lazy-src=\"../img/image-20210504200659338.png\" alt=\"image-20210504200659338\"></p>\n<p><img src= \"/img/loading.gif\" data-lazy-src=\"../img/image-20210504200711531.png\" alt=\"image-20210504200711531\"></p>\n<h3 id=\"Git文件操作\"><a href=\"#Git文件操作\" class=\"headerlink\" title=\"Git文件操作\"></a>Git文件操作</h3><p>版本控制就是对文件的版本控制，要对文件进行修改、提交等操作，首先要知道文件当前在什么状态，不然可能会提交了现在还不想提交的文件，或者要提交的文件没提交上。</p>\n<ul>\n<li>Untracked: 未跟踪, 此文件在文件夹中, 但并没有加入到git库, 不参与版本控制. 通过<code>git add </code>状态变为Staged.</li>\n<li>Unmodify: 文件已经入库, 未修改, 即版本库中的文件快照内容与文件夹中完全一致. 这种类型的文件有两种去处, 如果它被修改, 而变为Modified. 如果使用<code>git rm</code>移出版本库, 则成为Untracked文件</li>\n<li>Modified: 文件已修改, 仅仅是修改, 并没有进行其他的操作. 这个文件也有两个去处, 通过git add可进入暂存staged状态, 使用<code>git checkout</code> 则丢弃修改过, 返回到unmodify状态, 这个<code>git checkout</code>即从库中取出文件, 覆盖当前修改 !</li>\n<li>Staged: 暂存状态. 执行<code>git commit</code>则将修改同步到库中, 这时库中的文件和本地文件又变为一致, 文件为Unmodify状态. 执行<code>git reset HEAD filename</code>取消暂存, 文件状态为Modified</li>\n</ul>\n<p><img src= \"/img/loading.gif\" data-lazy-src=\"../img/image-20210504201126684.png\" alt=\"image-20210504201126684\"></p>\n<h4 id=\"添加所有文件到暂存区\"><a href=\"#添加所有文件到暂存区\" class=\"headerlink\" title=\"添加所有文件到暂存区\"></a>添加所有文件到暂存区</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git add .</span><br></pre></td></tr></table></figure>\n\n<p><img src= \"/img/loading.gif\" data-lazy-src=\"../img/image-20210504201156084.png\" alt=\"image-20210504201156084\"></p>\n<h4 id=\"提交暂存区文件到（本地）仓库\"><a href=\"#提交暂存区文件到（本地）仓库\" class=\"headerlink\" title=\"提交暂存区文件到（本地）仓库\"></a>提交暂存区文件到（本地）仓库</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git commit -m</span><br></pre></td></tr></table></figure>\n\n<p>-m参数：后跟提交信息</p>\n<p><img src= \"/img/loading.gif\" data-lazy-src=\"../img/image-20210504201626619.png\" alt=\"image-20210504201626619\"></p>\n<h4 id=\"忽略文件\"><a href=\"#忽略文件\" class=\"headerlink\" title=\"忽略文件\"></a>忽略文件</h4><p>有些时候我们不想把某些文件纳入版本控制中，比如数据库文件，临时文件，设计文件等</p>\n<p>在主目录下建立”.gitignore”文件，此文件有如下规则：</p>\n<ol>\n<li>忽略文件中的空行或以井号（#）开始的行将会被忽略。</li>\n<li>可以使用Linux通配符。例如：星号（*）代表任意多个字符，问号（？）代表一个字符，方括号（[abc]）代表可选字符范围，大括号（{string1,string2,…}）代表可选的字符串等。</li>\n<li>如果名称的最前面有一个感叹号（!），表示例外规则，将不被忽略。</li>\n<li>如果名称的最前面是一个路径分隔符（/），表示要忽略的文件在此目录下，而子目录中的文件不忽略。</li>\n<li>如果名称的最后面是一个路径分隔符（/），表示要忽略的是此目录下该名称的子目录，而非文件（默认文件或目录都忽略）。</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#为注释</span><br><span class=\"line\">*.txt        #忽略所有 .txt结尾的文件,这样的话上传就不会被选中！</span><br><span class=\"line\">!lib.txt     #但lib.txt除外</span><br><span class=\"line\">&#x2F;temp        #仅忽略项目根目录下的TODO文件,不包括其它目录temp</span><br><span class=\"line\">build&#x2F;       #忽略build&#x2F;目录下的所有文件</span><br><span class=\"line\">doc&#x2F;*.txt    #会忽略 doc&#x2F;notes.txt 但不包括 doc&#x2F;server&#x2F;arch.txt</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"远程仓库\"><a href=\"#远程仓库\" class=\"headerlink\" title=\"远程仓库\"></a>远程仓库</h2><h3 id=\"Gitee\"><a href=\"#Gitee\" class=\"headerlink\" title=\"Gitee\"></a>Gitee</h3><h4 id=\"注册登录\"><a href=\"#注册登录\" class=\"headerlink\" title=\"注册登录\"></a>注册登录</h4><p>跳过</p>\n<h3 id=\"设置本机绑定SSH公钥，实现免密码登录\"><a href=\"#设置本机绑定SSH公钥，实现免密码登录\" class=\"headerlink\" title=\"设置本机绑定SSH公钥，实现免密码登录\"></a>设置本机绑定SSH公钥，实现免密码登录</h3><ul>\n<li>进入用户目录中的<code>.ssh</code></li>\n</ul>\n<p><img src= \"/img/loading.gif\" data-lazy-src=\"../img/image-20210504203045490.png\" alt=\"image-20210504203045490\"></p>\n<ul>\n<li>生成公钥</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ssh-keygen -t rsa</span><br></pre></td></tr></table></figure>\n\n<p>-t参数：后跟加密算法  rsa为官方推荐</p>\n<p><img src= \"/img/loading.gif\" data-lazy-src=\"../img/image-20210504203219100.png\" alt=\"image-20210504203219100\"></p>\n<ul>\n<li>上传公钥并绑定</li>\n</ul>\n<p><img src= \"/img/loading.gif\" data-lazy-src=\"../img/image-20210504203420609.png\" alt=\"image-20210504203420609\"></p>\n<h3 id=\"创建仓库\"><a href=\"#创建仓库\" class=\"headerlink\" title=\"创建仓库\"></a>创建仓库</h3><p><img src= \"/img/loading.gif\" data-lazy-src=\"../img/image-20210504203937184.png\" alt=\"image-20210504203937184\"></p>\n<p><img src= \"/img/loading.gif\" data-lazy-src=\"../img/image-20210504204121963.png\" alt=\"image-20210504204121963\"></p>\n<p><img src= \"/img/loading.gif\" data-lazy-src=\"../img/image-20210504204315996.png\" alt=\"image-20210504204315996\"></p>\n<p><img src= \"/img/loading.gif\" data-lazy-src=\"../img/image-20210504204410140.png\" alt=\"image-20210504204410140\"></p>\n<p><img src= \"/img/loading.gif\" data-lazy-src=\"../img/image-20210504204428438.png\" alt=\"image-20210504204428438\"></p>\n<h2 id=\"IDEA集成Git\"><a href=\"#IDEA集成Git\" class=\"headerlink\" title=\"IDEA集成Git\"></a>IDEA集成Git</h2><h3 id=\"新建项目\"><a href=\"#新建项目\" class=\"headerlink\" title=\"新建项目\"></a>新建项目</h3><p><img src= \"/img/loading.gif\" data-lazy-src=\"../img/image-20210504205845484.png\" alt=\"image-20210504205845484\"></p>\n<h3 id=\"绑定git\"><a href=\"#绑定git\" class=\"headerlink\" title=\"绑定git\"></a>绑定git</h3><p>万能方式：<strong>直接拷贝.git 文件夹</strong></p>\n<p><img src= \"/img/loading.gif\" data-lazy-src=\"../img/image-20210504205826026.png\" alt=\"image-20210504205826026\"></p>\n<p><img src= \"/img/loading.gif\" data-lazy-src=\"../img/image-20210504210133979.png\" alt=\"image-20210504210133979\"></p>\n<h3 id=\"修改文件，使用IDEA操作git。\"><a href=\"#修改文件，使用IDEA操作git。\" class=\"headerlink\" title=\"修改文件，使用IDEA操作git。\"></a>修改文件，使用IDEA操作git。</h3><ul>\n<li>添加到暂存区</li>\n<li>commit 提交</li>\n<li>push到远程仓库</li>\n</ul>\n<h3 id=\"提交\"><a href=\"#提交\" class=\"headerlink\" title=\"提交\"></a>提交</h3><p><img src= \"/img/loading.gif\" data-lazy-src=\"../img/image-20210504210808774.png\" alt=\"image-20210504210808774\"></p>\n<p><img src= \"/img/loading.gif\" data-lazy-src=\"../img/image-20210504210826946.png\" alt=\"image-20210504210826946\"></p>\n<p><img src= \"/img/loading.gif\" data-lazy-src=\"../img/image-20210504210841542.png\" alt=\"image-20210504210841542\"></p>\n<h2 id=\"Git分支\"><a href=\"#Git分支\" class=\"headerlink\" title=\"Git分支\"></a>Git分支</h2><p><strong>多个分支并行执行，能使我们代码不冲突，即可同时存在多个版本</strong></p>\n<p><img src= \"/img/loading.gif\" data-lazy-src=\"../img/image-20210504211311018.png\" alt=\"image-20210504211311018\"></p>\n<p><img src= \"/img/loading.gif\" data-lazy-src=\"../img/image-20210504211322608.png\" alt=\"image-20210504211322608\"></p>\n<h3 id=\"新建分支\"><a href=\"#新建分支\" class=\"headerlink\" title=\"新建分支\"></a>新建分支</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git branch 名字</span><br></pre></td></tr></table></figure>\n\n<p><img src= \"/img/loading.gif\" data-lazy-src=\"../img/image-20210504211532031.png\" alt=\"image-20210504211532031\"></p>\n<p><img src= \"/img/loading.gif\" data-lazy-src=\"../img/image-20210504211622522.png\" alt=\"image-20210504211622522\"></p>\n<h3 id=\"常用指令\"><a href=\"#常用指令\" class=\"headerlink\" title=\"常用指令\"></a>常用指令</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 列出所有本地分支</span></span><br><span class=\"line\">git branch</span><br><span class=\"line\"><span class=\"comment\"># 列出所有远程分支</span></span><br><span class=\"line\">git branch -r</span><br><span class=\"line\"><span class=\"comment\"># 新建一个分支，但依然停留在当前分支</span></span><br><span class=\"line\">git branch [branch-name]</span><br><span class=\"line\"><span class=\"comment\"># 新建一个分支，并切换到该分支</span></span><br><span class=\"line\">git checkout -b [branch]</span><br><span class=\"line\"><span class=\"comment\"># 合并指定分支到当前分支</span></span><br><span class=\"line\">git merge [branch]</span><br><span class=\"line\"><span class=\"comment\"># 删除分支</span></span><br><span class=\"line\">git branch -d [branch-name]</span><br><span class=\"line\"><span class=\"comment\"># 删除远程分支</span></span><br><span class=\"line\">git push origin --delete [branch-name]</span><br><span class=\"line\">git branch -dr [remote/branch]</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"学习参考\"><a href=\"#学习参考\" class=\"headerlink\" title=\"学习参考\"></a>学习参考</h2><ul>\n<li><p>视频：<a href=\"https://www.bilibili.com/video/BV1FE411P7B3\">【狂神说Java】Git最新教程通俗易懂_哔哩哔哩 (゜-゜)つロ 干杯~-bilibili</a></p>\n</li>\n<li><p>笔记：<a href=\"https://mp.weixin.qq.com/s?__biz=Mzg2NTAzMTExNg==&mid=2247483866&idx=1&sn=fe987cd24448bd6eb2138cfd43a82cf8&scene=19#wechat_redirect\">视频同步笔记：狂神聊Git (qq.com)</a></p>\n</li>\n</ul>\n","more":"<h2 id=\"版本控制\"><a href=\"#版本控制\" class=\"headerlink\" title=\"版本控制\"></a>版本控制</h2><h3 id=\"介绍\"><a href=\"#介绍\" class=\"headerlink\" title=\"介绍\"></a>介绍</h3><p>版本控制（Revision control）是一种在开发的过程中用于管理我们对文件、目录或工程等内容的修改历史，方便查看更改历史记录，备份以便恢复以前的版本的软件工程技术。</p>\n<ul>\n<li>实现跨区域多人协同开发</li>\n<li>追踪和记载一个或者多个文件的历史记录</li>\n<li>组织和保护你的源代码和文档</li>\n<li>统计工作量</li>\n<li>并行开发、提高开发效率</li>\n<li>跟踪记录整个软件的开发过程</li>\n<li>减轻开发人员的负担，节省时间，同时降低人为错误</li>\n</ul>\n<p>简单说就是用于管理多人协同开发项目的技术。</p>\n<h3 id=\"常见工具\"><a href=\"#常见工具\" class=\"headerlink\" title=\"常见工具\"></a>常见工具</h3><p>我们学习的东西，一定是当下最流行的！</p>\n<p>主流的版本控制器有如下这些：</p>\n<ul>\n<li><strong>Git</strong></li>\n<li><strong>SVN</strong>（Subversion）</li>\n<li><strong>CVS</strong>（Concurrent Versions System）</li>\n<li><strong>VSS</strong>（Micorosoft Visual SourceSafe）</li>\n<li><strong>TFS</strong>（Team Foundation Server）</li>\n<li>Visual Studio Online</li>\n</ul>\n<p>版本控制产品非常的多（Perforce、Rational ClearCase、RCS（GNU Revision Control System）、Serena Dimention、SVK、BitKeeper、Monotone、Bazaar、Mercurial、SourceGear Vault），现在影响力最大且使用最广泛的是Git与SVN</p>\n<h2 id=\"开始使用Git\"><a href=\"#开始使用Git\" class=\"headerlink\" title=\"开始使用Git\"></a>开始使用Git</h2><h3 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h3><p>打开 [git官网] <a href=\"https://git-scm.com/%EF%BC%8C%E4%B8%8B%E8%BD%BDgit%E5%AF%B9%E5%BA%94%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E7%9A%84%E7%89%88%E6%9C%AC%E3%80%82\">https://git-scm.com/，下载git对应操作系统的版本。</a></p>\n<p>所有东西下载慢的话就可以去找镜像！</p>\n<p>官网下载太慢，我们可以使用淘宝镜像下载：<a href=\"http://npm.taobao.org/mirrors/git-for-windows/\">http://npm.taobao.org/mirrors/git-for-windows/</a></p>\n<h3 id=\"启动\"><a href=\"#启动\" class=\"headerlink\" title=\"启动\"></a>启动</h3><p>安装成功后在开始菜单中会有Git项，菜单下有3个程序：任意文件夹下右键也可以看到对应的程序！</p>\n<p><img src=\"../img/image-20210504194416373.png\" alt=\"image-20210504194416373\"></p>\n<p><strong>Git Bash：</strong>Unix与Linux风格的命令行，使用最多，推荐最多</p>\n<p><strong>Git CMD：</strong>Windows风格的命令行</p>\n<p><strong>Git GUI</strong>：图形界面的Git，不建议初学者使用，尽量先熟悉常用命令</p>\n<h3 id=\"Git配置\"><a href=\"#Git配置\" class=\"headerlink\" title=\"Git配置\"></a>Git配置</h3><p><strong>所有配置文件都保存在本地</strong></p>\n<p><img src=\"../img/image-20210504195034124.png\" alt=\"image-20210504195034124\"></p>\n<p><img src=\"../img/image-20210504195134256.png\" alt=\"image-20210504195134256\"></p>\n<ul>\n<li>查看配置 </li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git config -l</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"../img/image-20210504194533298.png\" alt=\"image-20210504194533298\"></p>\n<ul>\n<li>本地配置</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git config --system --list</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"../img/image-20210504194639960.png\" alt=\"image-20210504194639960\"></p>\n<ul>\n<li>全局配置</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git config --global --list</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"../img/image-20210504194734013.png\" alt=\"image-20210504194734013\"></p>\n<ul>\n<li><p>设置用户名和邮箱</p>\n<p>将会修改用户目录下的<code>.gitconfig</code>文件</p>\n</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git config --global user.name <span class=\"string\">&quot;HUII&quot;</span></span><br><span class=\"line\">git config --global user.email <span class=\"string\">&quot;1390113493@qq.com&quot;</span></span><br></pre></td></tr></table></figure>\n\n<p><img src=\"../img/image-20210504195343743.png\" alt=\"image-20210504195343743\"></p>\n<h2 id=\"Git理论\"><a href=\"#Git理论\" class=\"headerlink\" title=\"Git理论\"></a>Git理论</h2><h3 id=\"基本结构\"><a href=\"#基本结构\" class=\"headerlink\" title=\"基本结构\"></a>基本结构</h3><p>Git本地有三个工作区域：工作目录（Working Directory）、暂存区(Stage/Index)、资源库(Repository或Git Directory)。如果在加上远程的git仓库(Remote Directory)就可以分为四个工作区域。文件在这四个区域之间的转换关系如下：</p>\n<p><img src=\"../img/image-20210504195721339.png\" alt=\"image-20210504195721339\"></p>\n<ul>\n<li>Workspace：工作区，就是你平时存放项目代码的地方</li>\n<li>Index / Stage：暂存区，用于临时存放你的改动，<strong>事实上它只是一个文件</strong>，保存即将提交到文件列表信息</li>\n<li>Repository：仓库区（或本地仓库），就是安全存放数据的位置，这里面有你提交到所有版本的数据。其中HEAD指向最新放入仓库的版本</li>\n<li>Remote：远程仓库，托管代码的服务器，可以简单的认为是你项目组中的一台电脑用于远程数据交换</li>\n</ul>\n<p><img src=\"../img/image-20210504195925690.png\" alt=\"image-20210504195925690\"></p>\n<h3 id=\"工作流程\"><a href=\"#工作流程\" class=\"headerlink\" title=\"工作流程\"></a>工作流程</h3><ul>\n<li><p>在工作目录中添加、修改文件；</p>\n</li>\n<li><p>将需要进行版本管理的文件放入暂存区域；</p>\n</li>\n<li><p>将暂存区域的文件提交到git仓库。</p>\n</li>\n</ul>\n<p>因此，git管理的文件有三种状态：已修改（modified）,已暂存（staged）,已提交(committed)</p>\n<p><img src=\"../img/image-20210504200102817.png\" alt=\"image-20210504200102817\"></p>\n<h2 id=\"Git基本操作\"><a href=\"#Git基本操作\" class=\"headerlink\" title=\"Git基本操作\"></a>Git基本操作</h2><h3 id=\"创建工作目录与常用指令\"><a href=\"#创建工作目录与常用指令\" class=\"headerlink\" title=\"创建工作目录与常用指令\"></a>创建工作目录与常用指令</h3><p><img src=\"../img/image-20210504200233058.png\" alt=\"image-20210504200233058\"></p>\n<h4 id=\"本地仓库搭建\"><a href=\"#本地仓库搭建\" class=\"headerlink\" title=\"本地仓库搭建\"></a>本地仓库搭建</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git init</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"../img/image-20210504200453908.png\" alt=\"image-20210504200453908\"></p>\n<h4 id=\"克隆远程仓库到本地\"><a href=\"#克隆远程仓库到本地\" class=\"headerlink\" title=\"克隆远程仓库到本地\"></a>克隆远程仓库到本地</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git <span class=\"built_in\">clone</span> [url]</span><br></pre></td></tr></table></figure>\n\n\n\n<p><img src=\"../img/image-20210504200554204.png\" alt=\"image-20210504200554204\"></p>\n<p><img src=\"../img/image-20210504200659338.png\" alt=\"image-20210504200659338\"></p>\n<p><img src=\"../img/image-20210504200711531.png\" alt=\"image-20210504200711531\"></p>\n<h3 id=\"Git文件操作\"><a href=\"#Git文件操作\" class=\"headerlink\" title=\"Git文件操作\"></a>Git文件操作</h3><p>版本控制就是对文件的版本控制，要对文件进行修改、提交等操作，首先要知道文件当前在什么状态，不然可能会提交了现在还不想提交的文件，或者要提交的文件没提交上。</p>\n<ul>\n<li>Untracked: 未跟踪, 此文件在文件夹中, 但并没有加入到git库, 不参与版本控制. 通过<code>git add </code>状态变为Staged.</li>\n<li>Unmodify: 文件已经入库, 未修改, 即版本库中的文件快照内容与文件夹中完全一致. 这种类型的文件有两种去处, 如果它被修改, 而变为Modified. 如果使用<code>git rm</code>移出版本库, 则成为Untracked文件</li>\n<li>Modified: 文件已修改, 仅仅是修改, 并没有进行其他的操作. 这个文件也有两个去处, 通过git add可进入暂存staged状态, 使用<code>git checkout</code> 则丢弃修改过, 返回到unmodify状态, 这个<code>git checkout</code>即从库中取出文件, 覆盖当前修改 !</li>\n<li>Staged: 暂存状态. 执行<code>git commit</code>则将修改同步到库中, 这时库中的文件和本地文件又变为一致, 文件为Unmodify状态. 执行<code>git reset HEAD filename</code>取消暂存, 文件状态为Modified</li>\n</ul>\n<p><img src=\"../img/image-20210504201126684.png\" alt=\"image-20210504201126684\"></p>\n<h4 id=\"添加所有文件到暂存区\"><a href=\"#添加所有文件到暂存区\" class=\"headerlink\" title=\"添加所有文件到暂存区\"></a>添加所有文件到暂存区</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git add .</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"../img/image-20210504201156084.png\" alt=\"image-20210504201156084\"></p>\n<h4 id=\"提交暂存区文件到（本地）仓库\"><a href=\"#提交暂存区文件到（本地）仓库\" class=\"headerlink\" title=\"提交暂存区文件到（本地）仓库\"></a>提交暂存区文件到（本地）仓库</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git commit -m</span><br></pre></td></tr></table></figure>\n\n<p>-m参数：后跟提交信息</p>\n<p><img src=\"../img/image-20210504201626619.png\" alt=\"image-20210504201626619\"></p>\n<h4 id=\"忽略文件\"><a href=\"#忽略文件\" class=\"headerlink\" title=\"忽略文件\"></a>忽略文件</h4><p>有些时候我们不想把某些文件纳入版本控制中，比如数据库文件，临时文件，设计文件等</p>\n<p>在主目录下建立”.gitignore”文件，此文件有如下规则：</p>\n<ol>\n<li>忽略文件中的空行或以井号（#）开始的行将会被忽略。</li>\n<li>可以使用Linux通配符。例如：星号（*）代表任意多个字符，问号（？）代表一个字符，方括号（[abc]）代表可选字符范围，大括号（{string1,string2,…}）代表可选的字符串等。</li>\n<li>如果名称的最前面有一个感叹号（!），表示例外规则，将不被忽略。</li>\n<li>如果名称的最前面是一个路径分隔符（/），表示要忽略的文件在此目录下，而子目录中的文件不忽略。</li>\n<li>如果名称的最后面是一个路径分隔符（/），表示要忽略的是此目录下该名称的子目录，而非文件（默认文件或目录都忽略）。</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#为注释</span><br><span class=\"line\">*.txt        #忽略所有 .txt结尾的文件,这样的话上传就不会被选中！</span><br><span class=\"line\">!lib.txt     #但lib.txt除外</span><br><span class=\"line\">&#x2F;temp        #仅忽略项目根目录下的TODO文件,不包括其它目录temp</span><br><span class=\"line\">build&#x2F;       #忽略build&#x2F;目录下的所有文件</span><br><span class=\"line\">doc&#x2F;*.txt    #会忽略 doc&#x2F;notes.txt 但不包括 doc&#x2F;server&#x2F;arch.txt</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"远程仓库\"><a href=\"#远程仓库\" class=\"headerlink\" title=\"远程仓库\"></a>远程仓库</h2><h3 id=\"Gitee\"><a href=\"#Gitee\" class=\"headerlink\" title=\"Gitee\"></a>Gitee</h3><h4 id=\"注册登录\"><a href=\"#注册登录\" class=\"headerlink\" title=\"注册登录\"></a>注册登录</h4><p>跳过</p>\n<h3 id=\"设置本机绑定SSH公钥，实现免密码登录\"><a href=\"#设置本机绑定SSH公钥，实现免密码登录\" class=\"headerlink\" title=\"设置本机绑定SSH公钥，实现免密码登录\"></a>设置本机绑定SSH公钥，实现免密码登录</h3><ul>\n<li>进入用户目录中的<code>.ssh</code></li>\n</ul>\n<p><img src=\"../img/image-20210504203045490.png\" alt=\"image-20210504203045490\"></p>\n<ul>\n<li>生成公钥</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ssh-keygen -t rsa</span><br></pre></td></tr></table></figure>\n\n<p>-t参数：后跟加密算法  rsa为官方推荐</p>\n<p><img src=\"../img/image-20210504203219100.png\" alt=\"image-20210504203219100\"></p>\n<ul>\n<li>上传公钥并绑定</li>\n</ul>\n<p><img src=\"../img/image-20210504203420609.png\" alt=\"image-20210504203420609\"></p>\n<h3 id=\"创建仓库\"><a href=\"#创建仓库\" class=\"headerlink\" title=\"创建仓库\"></a>创建仓库</h3><p><img src=\"../img/image-20210504203937184.png\" alt=\"image-20210504203937184\"></p>\n<p><img src=\"../img/image-20210504204121963.png\" alt=\"image-20210504204121963\"></p>\n<p><img src=\"../img/image-20210504204315996.png\" alt=\"image-20210504204315996\"></p>\n<p><img src=\"../img/image-20210504204410140.png\" alt=\"image-20210504204410140\"></p>\n<p><img src=\"../img/image-20210504204428438.png\" alt=\"image-20210504204428438\"></p>\n<h2 id=\"IDEA集成Git\"><a href=\"#IDEA集成Git\" class=\"headerlink\" title=\"IDEA集成Git\"></a>IDEA集成Git</h2><h3 id=\"新建项目\"><a href=\"#新建项目\" class=\"headerlink\" title=\"新建项目\"></a>新建项目</h3><p><img src=\"../img/image-20210504205845484.png\" alt=\"image-20210504205845484\"></p>\n<h3 id=\"绑定git\"><a href=\"#绑定git\" class=\"headerlink\" title=\"绑定git\"></a>绑定git</h3><p>万能方式：<strong>直接拷贝.git 文件夹</strong></p>\n<p><img src=\"../img/image-20210504205826026.png\" alt=\"image-20210504205826026\"></p>\n<p><img src=\"../img/image-20210504210133979.png\" alt=\"image-20210504210133979\"></p>\n<h3 id=\"修改文件，使用IDEA操作git。\"><a href=\"#修改文件，使用IDEA操作git。\" class=\"headerlink\" title=\"修改文件，使用IDEA操作git。\"></a>修改文件，使用IDEA操作git。</h3><ul>\n<li>添加到暂存区</li>\n<li>commit 提交</li>\n<li>push到远程仓库</li>\n</ul>\n<h3 id=\"提交\"><a href=\"#提交\" class=\"headerlink\" title=\"提交\"></a>提交</h3><p><img src=\"../img/image-20210504210808774.png\" alt=\"image-20210504210808774\"></p>\n<p><img src=\"../img/image-20210504210826946.png\" alt=\"image-20210504210826946\"></p>\n<p><img src=\"../img/image-20210504210841542.png\" alt=\"image-20210504210841542\"></p>\n<h2 id=\"Git分支\"><a href=\"#Git分支\" class=\"headerlink\" title=\"Git分支\"></a>Git分支</h2><p><strong>多个分支并行执行，能使我们代码不冲突，即可同时存在多个版本</strong></p>\n<p><img src=\"../img/image-20210504211311018.png\" alt=\"image-20210504211311018\"></p>\n<p><img src=\"../img/image-20210504211322608.png\" alt=\"image-20210504211322608\"></p>\n<h3 id=\"新建分支\"><a href=\"#新建分支\" class=\"headerlink\" title=\"新建分支\"></a>新建分支</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git branch 名字</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"../img/image-20210504211532031.png\" alt=\"image-20210504211532031\"></p>\n<p><img src=\"../img/image-20210504211622522.png\" alt=\"image-20210504211622522\"></p>\n<h3 id=\"常用指令\"><a href=\"#常用指令\" class=\"headerlink\" title=\"常用指令\"></a>常用指令</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 列出所有本地分支</span></span><br><span class=\"line\">git branch</span><br><span class=\"line\"><span class=\"comment\"># 列出所有远程分支</span></span><br><span class=\"line\">git branch -r</span><br><span class=\"line\"><span class=\"comment\"># 新建一个分支，但依然停留在当前分支</span></span><br><span class=\"line\">git branch [branch-name]</span><br><span class=\"line\"><span class=\"comment\"># 新建一个分支，并切换到该分支</span></span><br><span class=\"line\">git checkout -b [branch]</span><br><span class=\"line\"><span class=\"comment\"># 合并指定分支到当前分支</span></span><br><span class=\"line\">git merge [branch]</span><br><span class=\"line\"><span class=\"comment\"># 删除分支</span></span><br><span class=\"line\">git branch -d [branch-name]</span><br><span class=\"line\"><span class=\"comment\"># 删除远程分支</span></span><br><span class=\"line\">git push origin --delete [branch-name]</span><br><span class=\"line\">git branch -dr [remote/branch]</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"学习参考\"><a href=\"#学习参考\" class=\"headerlink\" title=\"学习参考\"></a>学习参考</h2><ul>\n<li><p>视频：<a href=\"https://www.bilibili.com/video/BV1FE411P7B3\">【狂神说Java】Git最新教程通俗易懂_哔哩哔哩 (゜-゜)つロ 干杯~-bilibili</a></p>\n</li>\n<li><p>笔记：<a href=\"https://mp.weixin.qq.com/s?__biz=Mzg2NTAzMTExNg==&mid=2247483866&idx=1&sn=fe987cd24448bd6eb2138cfd43a82cf8&scene=19#wechat_redirect\">视频同步笔记：狂神聊Git (qq.com)</a></p>\n</li>\n</ul>\n","categories":[{"name":"Coding","path":"api/categories/Coding.json"}],"tags":[{"name":"github","path":"api/tags/github.json"},{"name":"Git","path":"api/tags/Git.json"},{"name":"IDEA","path":"api/tags/IDEA.json"},{"name":"码云","path":"api/tags/码云.json"}]}